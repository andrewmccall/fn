
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.9"
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'jacoco'


configurations.all {
    exclude group: 'log4j', module: 'log4j'
    exclude group: 'org.slf4j'

}

repositories {
    jcenter()
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    group = 'com.andrewmccall.fn'
    version = '1.0.0-SNAPSHOT'

    dependencies {

        compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.7'
        compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.7'
        compile group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.7'

        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'

        testCompile 'junit:junit:4.12'
    }

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories =  files(sourceSets.main.output)
        reports {
            html.enabled = false
            xml.enabled = true
            csv.enabled = false
        }
    }

    test {
        testLogging {
            showStandardStreams = true
        }
    }
}

project (':common') {
    dependencies {
        compile project(':api')
    }
}

project(':gateway') {
    dependencies {
        compile project(':common')
        compile project(':api')
        compile project(':invoker')
    }
}

project(':invoker') {
    dependencies {
        compile project(':common')
        compile project(':api')
    }
}

project(':controller') {
    dependencies {
        compile project(':common')
        compile project(':api')
    }
}

project(':cli') {
    dependencies {
        compile project(':common')
        compile project(':api')
    }
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = false
        xml.enabled = true
        xml.destination = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

configure (jacocoRootReport) {
    group = 'verification'
    description = 'Creates a Jacoco report for all subprojects.'
}

check {
    dependsOn jacocoRootReport
}

